// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EndPoint end point
//
// swagger:model EndPoint
type EndPoint struct {

	// Host name in CIDR
	// Required: true
	HostName *string `json:"hostName"`

	// Number of inactive retries
	InactiveReTries int64 `json:"inactiveReTries,omitempty"`

	// Endpoint Identifier
	Name string `json:"name,omitempty"`

	// How frequently to probe in seconds
	ProbeDuration int64 `json:"probeDuration,omitempty"`

	// The l4port to probe on
	ProbePort int64 `json:"probePort,omitempty"`

	// URI for http/https probes
	ProbeReq string `json:"probeReq,omitempty"`

	// Response for http/https probes
	ProbeResp string `json:"probeResp,omitempty"`

	// Type of probe used
	// Enum: [tcp udp sctp ping http https none]
	ProbeType string `json:"probeType,omitempty"`
}

// Validate validates this end point
func (m *EndPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProbeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndPoint) validateHostName(formats strfmt.Registry) error {

	if err := validate.Required("hostName", "body", m.HostName); err != nil {
		return err
	}

	return nil
}

var endPointTypeProbeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tcp","udp","sctp","ping","http","https","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		endPointTypeProbeTypePropEnum = append(endPointTypeProbeTypePropEnum, v)
	}
}

const (

	// EndPointProbeTypeTCP captures enum value "tcp"
	EndPointProbeTypeTCP string = "tcp"

	// EndPointProbeTypeUDP captures enum value "udp"
	EndPointProbeTypeUDP string = "udp"

	// EndPointProbeTypeSctp captures enum value "sctp"
	EndPointProbeTypeSctp string = "sctp"

	// EndPointProbeTypePing captures enum value "ping"
	EndPointProbeTypePing string = "ping"

	// EndPointProbeTypeHTTP captures enum value "http"
	EndPointProbeTypeHTTP string = "http"

	// EndPointProbeTypeHTTPS captures enum value "https"
	EndPointProbeTypeHTTPS string = "https"

	// EndPointProbeTypeNone captures enum value "none"
	EndPointProbeTypeNone string = "none"
)

// prop value enum
func (m *EndPoint) validateProbeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, endPointTypeProbeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EndPoint) validateProbeType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProbeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProbeTypeEnum("probeType", "body", m.ProbeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this end point based on context it is used
func (m *EndPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EndPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndPoint) UnmarshalBinary(b []byte) error {
	var res EndPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
