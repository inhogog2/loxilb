// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PortEntry port entry
//
// swagger:model PortEntry
type PortEntry []*PortEntryItems0

// Validate validates this port entry
func (m PortEntry) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this port entry based on the context it is used
func (m PortEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {
			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PortEntryItems0 port entry items0
//
// swagger:model PortEntryItems0
type PortEntryItems0 struct {

	// Dataplan Sync check
	DataplaneSync int64 `json:"DataplaneSync,omitempty"`

	// port hardware information
	PortHardwareInformation *PortEntryItems0PortHardwareInformation `json:"portHardwareInformation,omitempty"`

	// port l2 information
	PortL2Information *PortEntryItems0PortL2Information `json:"portL2Information,omitempty"`

	// port l3 information
	PortL3Information *PortEntryItems0PortL3Information `json:"portL3Information,omitempty"`

	// The name of the Port interface
	PortName string `json:"portName,omitempty"`

	// Index of the Port
	PortNo int64 `json:"portNo,omitempty"`

	// port software information
	PortSoftwareInformation *PortEntryItems0PortSoftwareInformation `json:"portSoftwareInformation,omitempty"`

	// port statistic information
	PortStatisticInformation *PortEntryItems0PortStatisticInformation `json:"portStatisticInformation,omitempty"`

	// network zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this port entry items0
func (m *PortEntryItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePortHardwareInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortL2Information(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortL3Information(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortSoftwareInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortStatisticInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortEntryItems0) validatePortHardwareInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.PortHardwareInformation) { // not required
		return nil
	}

	if m.PortHardwareInformation != nil {
		if err := m.PortHardwareInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portHardwareInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portHardwareInformation")
			}
			return err
		}
	}

	return nil
}

func (m *PortEntryItems0) validatePortL2Information(formats strfmt.Registry) error {
	if swag.IsZero(m.PortL2Information) { // not required
		return nil
	}

	if m.PortL2Information != nil {
		if err := m.PortL2Information.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portL2Information")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portL2Information")
			}
			return err
		}
	}

	return nil
}

func (m *PortEntryItems0) validatePortL3Information(formats strfmt.Registry) error {
	if swag.IsZero(m.PortL3Information) { // not required
		return nil
	}

	if m.PortL3Information != nil {
		if err := m.PortL3Information.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portL3Information")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portL3Information")
			}
			return err
		}
	}

	return nil
}

func (m *PortEntryItems0) validatePortSoftwareInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.PortSoftwareInformation) { // not required
		return nil
	}

	if m.PortSoftwareInformation != nil {
		if err := m.PortSoftwareInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portSoftwareInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portSoftwareInformation")
			}
			return err
		}
	}

	return nil
}

func (m *PortEntryItems0) validatePortStatisticInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.PortStatisticInformation) { // not required
		return nil
	}

	if m.PortStatisticInformation != nil {
		if err := m.PortStatisticInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portStatisticInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portStatisticInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this port entry items0 based on the context it is used
func (m *PortEntryItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePortHardwareInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortL2Information(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortL3Information(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortSoftwareInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortStatisticInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortEntryItems0) contextValidatePortHardwareInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.PortHardwareInformation != nil {
		if err := m.PortHardwareInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portHardwareInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portHardwareInformation")
			}
			return err
		}
	}

	return nil
}

func (m *PortEntryItems0) contextValidatePortL2Information(ctx context.Context, formats strfmt.Registry) error {

	if m.PortL2Information != nil {
		if err := m.PortL2Information.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portL2Information")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portL2Information")
			}
			return err
		}
	}

	return nil
}

func (m *PortEntryItems0) contextValidatePortL3Information(ctx context.Context, formats strfmt.Registry) error {

	if m.PortL3Information != nil {
		if err := m.PortL3Information.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portL3Information")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portL3Information")
			}
			return err
		}
	}

	return nil
}

func (m *PortEntryItems0) contextValidatePortSoftwareInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.PortSoftwareInformation != nil {
		if err := m.PortSoftwareInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portSoftwareInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portSoftwareInformation")
			}
			return err
		}
	}

	return nil
}

func (m *PortEntryItems0) contextValidatePortStatisticInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.PortStatisticInformation != nil {
		if err := m.PortStatisticInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portStatisticInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portStatisticInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortEntryItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortEntryItems0) UnmarshalBinary(b []byte) error {
	var res PortEntryItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PortEntryItems0PortHardwareInformation port entry items0 port hardware information
//
// swagger:model PortEntryItems0PortHardwareInformation
type PortEntryItems0PortHardwareInformation struct {

	// link status
	Link bool `json:"link,omitempty"`

	// MAC address of the port
	MacAddress string `json:"macAddress,omitempty"`

	// Port's mater
	Master string `json:"master,omitempty"`

	// MTU of the port
	Mtu int64 `json:"mtu,omitempty"`

	// MAC address written by byte array
	RawMacAddress []int64 `json:"rawMacAddress"`

	// real port..
	Real string `json:"real,omitempty"`

	// state...
	State bool `json:"state,omitempty"`

	// Tunnel Id such as VxLAN.
	TunnelID int64 `json:"tunnelId,omitempty"`
}

// Validate validates this port entry items0 port hardware information
func (m *PortEntryItems0PortHardwareInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this port entry items0 port hardware information based on context it is used
func (m *PortEntryItems0PortHardwareInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PortEntryItems0PortHardwareInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortEntryItems0PortHardwareInformation) UnmarshalBinary(b []byte) error {
	var res PortEntryItems0PortHardwareInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PortEntryItems0PortL2Information port entry items0 port l2 information
//
// swagger:model PortEntryItems0PortL2Information
type PortEntryItems0PortL2Information struct {

	// Is PVID config or not
	IsPvid bool `json:"isPvid,omitempty"`

	// virtual lan id(VLAN ID)
	Vid int64 `json:"vid,omitempty"`
}

// Validate validates this port entry items0 port l2 information
func (m *PortEntryItems0PortL2Information) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this port entry items0 port l2 information based on context it is used
func (m *PortEntryItems0PortL2Information) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PortEntryItems0PortL2Information) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortEntryItems0PortL2Information) UnmarshalBinary(b []byte) error {
	var res PortEntryItems0PortL2Information
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PortEntryItems0PortL3Information port entry items0 port l3 information
//
// swagger:model PortEntryItems0PortL3Information
type PortEntryItems0PortL3Information struct {

	// List of IP address v4
	IPV4Address []string `json:"IPv4Address"`

	// List of the IP address v6
	IPV6Address []string `json:"IPv6Address"`

	// Is routed or not
	Routed bool `json:"routed,omitempty"`
}

// Validate validates this port entry items0 port l3 information
func (m *PortEntryItems0PortL3Information) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this port entry items0 port l3 information based on context it is used
func (m *PortEntryItems0PortL3Information) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PortEntryItems0PortL3Information) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortEntryItems0PortL3Information) UnmarshalBinary(b []byte) error {
	var res PortEntryItems0PortL3Information
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PortEntryItems0PortSoftwareInformation port entry items0 port software information
//
// swagger:model PortEntryItems0PortSoftwareInformation
type PortEntryItems0PortSoftwareInformation struct {

	// The status of the eBPF loaded
	BpfLoaded bool `json:"bpfLoaded,omitempty"`

	// The ID of the Port in the software(OS)
	OsID int64 `json:"osId,omitempty"`

	// Activation status of the port
	PortActive bool `json:"portActive,omitempty"`

	// Priority of the port
	PortProp int64 `json:"portProp,omitempty"`

	// port type
	PortType int64 `json:"portType,omitempty"`
}

// Validate validates this port entry items0 port software information
func (m *PortEntryItems0PortSoftwareInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this port entry items0 port software information based on context it is used
func (m *PortEntryItems0PortSoftwareInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PortEntryItems0PortSoftwareInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortEntryItems0PortSoftwareInformation) UnmarshalBinary(b []byte) error {
	var res PortEntryItems0PortSoftwareInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PortEntryItems0PortStatisticInformation port entry items0 port statistic information
//
// swagger:model PortEntryItems0PortStatisticInformation
type PortEntryItems0PortStatisticInformation struct {

	// Statistic of the ingress port bytes.
	RxBytes int64 `json:"rxBytes,omitempty"`

	// Statistic of the number of ingress Error packets.
	RxErrors int64 `json:"rxErrors,omitempty"`

	// Statistic of the number of ingress packets.
	RxPackets int64 `json:"rxPackets,omitempty"`

	// Statistic of the egress port bytes.
	TxBytes int64 `json:"txBytes,omitempty"`

	// Statistic of the number of egress Error packets.
	TxErrors int64 `json:"txErrors,omitempty"`

	// Statistic of the number of egress packets.
	TxPackets int64 `json:"txPackets,omitempty"`
}

// Validate validates this port entry items0 port statistic information
func (m *PortEntryItems0PortStatisticInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this port entry items0 port statistic information based on context it is used
func (m *PortEntryItems0PortStatisticInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PortEntryItems0PortStatisticInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortEntryItems0PortStatisticInformation) UnmarshalBinary(b []byte) error {
	var res PortEntryItems0PortStatisticInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
