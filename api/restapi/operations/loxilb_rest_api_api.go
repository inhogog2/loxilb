// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLoxilbRestAPIAPI creates a new LoxilbRestAPI instance
func NewLoxilbRestAPIAPI(spec *loads.Document) *LoxilbRestAPIAPI {
	return &LoxilbRestAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler: DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandlerFunc(func(params DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProto has not yet been implemented")
		}),
		DeleteConfigRouteDestinationIPNetIPAddressMaskHandler: DeleteConfigRouteDestinationIPNetIPAddressMaskHandlerFunc(func(params DeleteConfigRouteDestinationIPNetIPAddressMaskParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigRouteDestinationIPNetIPAddressMask has not yet been implemented")
		}),
		DeleteConfigSessionIdentIdentHandler: DeleteConfigSessionIdentIdentHandlerFunc(func(params DeleteConfigSessionIdentIdentParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigSessionIdentIdent has not yet been implemented")
		}),
		DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler: DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandlerFunc(func(params DeleteConfigSessionulclIdentIdentUlclAddressIPAddressParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteConfigSessionulclIdentIdentUlclAddressIPAddress has not yet been implemented")
		}),
		GetConfigConntrackAllHandler: GetConfigConntrackAllHandlerFunc(func(params GetConfigConntrackAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigConntrackAll has not yet been implemented")
		}),
		GetConfigLoadbalancerAllHandler: GetConfigLoadbalancerAllHandlerFunc(func(params GetConfigLoadbalancerAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigLoadbalancerAll has not yet been implemented")
		}),
		GetConfigPortAllHandler: GetConfigPortAllHandlerFunc(func(params GetConfigPortAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigPortAll has not yet been implemented")
		}),
		GetConfigSessionAllHandler: GetConfigSessionAllHandlerFunc(func(params GetConfigSessionAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigSessionAll has not yet been implemented")
		}),
		GetConfigSessionulclAllHandler: GetConfigSessionulclAllHandlerFunc(func(params GetConfigSessionulclAllParams) middleware.Responder {
			return middleware.NotImplemented("operation GetConfigSessionulclAll has not yet been implemented")
		}),
		PostConfigLoadbalancerHandler: PostConfigLoadbalancerHandlerFunc(func(params PostConfigLoadbalancerParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigLoadbalancer has not yet been implemented")
		}),
		PostConfigRouteHandler: PostConfigRouteHandlerFunc(func(params PostConfigRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigRoute has not yet been implemented")
		}),
		PostConfigSessionHandler: PostConfigSessionHandlerFunc(func(params PostConfigSessionParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigSession has not yet been implemented")
		}),
		PostConfigSessionulclHandler: PostConfigSessionulclHandlerFunc(func(params PostConfigSessionulclParams) middleware.Responder {
			return middleware.NotImplemented("operation PostConfigSessionulcl has not yet been implemented")
		}),
	}
}

/*LoxilbRestAPIAPI Loxilb REST API for Baremetal Scenarios */
type LoxilbRestAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler sets the operation handler for the delete config loadbalancer externalipaddress IP address port port protocol proto operation
	DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler
	// DeleteConfigRouteDestinationIPNetIPAddressMaskHandler sets the operation handler for the delete config route destination IP net IP address mask operation
	DeleteConfigRouteDestinationIPNetIPAddressMaskHandler DeleteConfigRouteDestinationIPNetIPAddressMaskHandler
	// DeleteConfigSessionIdentIdentHandler sets the operation handler for the delete config session ident ident operation
	DeleteConfigSessionIdentIdentHandler DeleteConfigSessionIdentIdentHandler
	// DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler sets the operation handler for the delete config sessionulcl ident ident ulcl address IP address operation
	DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler
	// GetConfigConntrackAllHandler sets the operation handler for the get config conntrack all operation
	GetConfigConntrackAllHandler GetConfigConntrackAllHandler
	// GetConfigLoadbalancerAllHandler sets the operation handler for the get config loadbalancer all operation
	GetConfigLoadbalancerAllHandler GetConfigLoadbalancerAllHandler
	// GetConfigPortAllHandler sets the operation handler for the get config port all operation
	GetConfigPortAllHandler GetConfigPortAllHandler
	// GetConfigSessionAllHandler sets the operation handler for the get config session all operation
	GetConfigSessionAllHandler GetConfigSessionAllHandler
	// GetConfigSessionulclAllHandler sets the operation handler for the get config sessionulcl all operation
	GetConfigSessionulclAllHandler GetConfigSessionulclAllHandler
	// PostConfigLoadbalancerHandler sets the operation handler for the post config loadbalancer operation
	PostConfigLoadbalancerHandler PostConfigLoadbalancerHandler
	// PostConfigRouteHandler sets the operation handler for the post config route operation
	PostConfigRouteHandler PostConfigRouteHandler
	// PostConfigSessionHandler sets the operation handler for the post config session operation
	PostConfigSessionHandler PostConfigSessionHandler
	// PostConfigSessionulclHandler sets the operation handler for the post config sessionulcl operation
	PostConfigSessionulclHandler PostConfigSessionulclHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *LoxilbRestAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *LoxilbRestAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *LoxilbRestAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *LoxilbRestAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *LoxilbRestAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *LoxilbRestAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *LoxilbRestAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *LoxilbRestAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *LoxilbRestAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the LoxilbRestAPIAPI
func (o *LoxilbRestAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler == nil {
		unregistered = append(unregistered, "DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler")
	}
	if o.DeleteConfigRouteDestinationIPNetIPAddressMaskHandler == nil {
		unregistered = append(unregistered, "DeleteConfigRouteDestinationIPNetIPAddressMaskHandler")
	}
	if o.DeleteConfigSessionIdentIdentHandler == nil {
		unregistered = append(unregistered, "DeleteConfigSessionIdentIdentHandler")
	}
	if o.DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler == nil {
		unregistered = append(unregistered, "DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler")
	}
	if o.GetConfigConntrackAllHandler == nil {
		unregistered = append(unregistered, "GetConfigConntrackAllHandler")
	}
	if o.GetConfigLoadbalancerAllHandler == nil {
		unregistered = append(unregistered, "GetConfigLoadbalancerAllHandler")
	}
	if o.GetConfigPortAllHandler == nil {
		unregistered = append(unregistered, "GetConfigPortAllHandler")
	}
	if o.GetConfigSessionAllHandler == nil {
		unregistered = append(unregistered, "GetConfigSessionAllHandler")
	}
	if o.GetConfigSessionulclAllHandler == nil {
		unregistered = append(unregistered, "GetConfigSessionulclAllHandler")
	}
	if o.PostConfigLoadbalancerHandler == nil {
		unregistered = append(unregistered, "PostConfigLoadbalancerHandler")
	}
	if o.PostConfigRouteHandler == nil {
		unregistered = append(unregistered, "PostConfigRouteHandler")
	}
	if o.PostConfigSessionHandler == nil {
		unregistered = append(unregistered, "PostConfigSessionHandler")
	}
	if o.PostConfigSessionulclHandler == nil {
		unregistered = append(unregistered, "PostConfigSessionulclHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *LoxilbRestAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *LoxilbRestAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *LoxilbRestAPIAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *LoxilbRestAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *LoxilbRestAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *LoxilbRestAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the loxilb rest API API
func (o *LoxilbRestAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *LoxilbRestAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/loadbalancer/externalipaddress/{ip_address}/port/{port}/protocol/{proto}"] = NewDeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProto(o.context, o.DeleteConfigLoadbalancerExternalipaddressIPAddressPortPortProtocolProtoHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/route/destinationIPNet/{ip_address}/{mask}"] = NewDeleteConfigRouteDestinationIPNetIPAddressMask(o.context, o.DeleteConfigRouteDestinationIPNetIPAddressMaskHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/session/ident/{ident}"] = NewDeleteConfigSessionIdentIdent(o.context, o.DeleteConfigSessionIdentIdentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/sessionulcl/ident/{ident}/ulclAddress/{ip_address}"] = NewDeleteConfigSessionulclIdentIdentUlclAddressIPAddress(o.context, o.DeleteConfigSessionulclIdentIdentUlclAddressIPAddressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/conntrack/all"] = NewGetConfigConntrackAll(o.context, o.GetConfigConntrackAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/loadbalancer/all"] = NewGetConfigLoadbalancerAll(o.context, o.GetConfigLoadbalancerAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/port/all"] = NewGetConfigPortAll(o.context, o.GetConfigPortAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/session/all"] = NewGetConfigSessionAll(o.context, o.GetConfigSessionAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/sessionulcl/all"] = NewGetConfigSessionulclAll(o.context, o.GetConfigSessionulclAllHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/loadbalancer"] = NewPostConfigLoadbalancer(o.context, o.PostConfigLoadbalancerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/route"] = NewPostConfigRoute(o.context, o.PostConfigRouteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/session"] = NewPostConfigSession(o.context, o.PostConfigSessionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/config/sessionulcl"] = NewPostConfigSessionulcl(o.context, o.PostConfigSessionulclHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *LoxilbRestAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *LoxilbRestAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *LoxilbRestAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *LoxilbRestAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *LoxilbRestAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
